# 暴力验证哥德巴赫猜想：任何一个大偶数都可以表示为两个素数之和
# 普通家用计算机上大约可以验证到10000000000000（13个零）的大偶数

from math import *

# 用试除法判断一个整数是否为素数
# 试除法因子不需超过目标的平方根
def is_prime(number): 
    if number % 2 == 0:
        return False
    M = int(sqrt(number)) + 2    # 因子上限，+2可确保不会漏过 
    for i in range(3, M, 2):  
        if number % i == 0:
            return False
    return True

# 输入想验证的起始偶数
while 1:
    first = int(input("请输入一个大于等于6的偶数："))
    if first % 2 == 0 and first >= 6 :
        break
    else:
        print("你的输入有误，请重新输入。\n")

# 连续验算N个偶数        
N = 10                  
for i in range(N):
    even_num = first + 2*i
    half = int(even_num/2)
    for j in range(half-1):
        number1 = half - j
        number2 = half + j
        if is_prime(number1) and is_prime(number2):
            print(even_num, "=", number1, "+", number2)
            break
    if number1 < 3 :
        print(even_num, "不符合'1+1'哥德巴赫猜想!!!!!!")
        
    
